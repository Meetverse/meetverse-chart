# Default values for meetverse.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: nginx
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

qdrant:
  image:
    repository: docker.io/qdrant/qdrant
    pullPolicy: IfNotPresent
    tag: ""
    useUnprivilegedImage: false
  imagePullSecrets: [ ]
  fullname: "qdrant"
  nameOverride: ""
  fullnameOverride: ""
  args: [ "./config/initialize.sh" ]
  env: { }
  # - name: QDRANT_ALLOW_RECOVERY_MODE
  #   value: true

  # checks - Readiness and liveness checks can only be enabled for either http (REST) or grpc (multiple checks not supported)
  # grpc checks are only available from k8s 1.24+ so as of per default we check http
  service:
    type: ClusterIP
    additionalLabels: { }
    annotations: { }
    loadBalancerIP: ""
    ports:
      - name: http
        port: 6333
        targetPort: 6333
        protocol: TCP
        checksEnabled: true
      - name: grpc
        port: 6334
        targetPort: 6334
        protocol: TCP
        checksEnabled: false
      - name: p2p
        port: 6335
        targetPort: 6335
        protocol: TCP
        checksEnabled: false

  ingress:
    enabled: false
    ingressClassName: ""
    additionalLabels: { }
    annotations: { }
    # kubernetes.io/ingress.class: alb
    hosts:
      - host: example-domain.com
        paths:
          - path: /
            pathType: Prefix
            servicePort: 6333
    tls: [ ]
      # - hosts:
    #    - example-domain.com
    #   secretName: tls-secret-name

  livenessProbe:
    enabled: false
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 1
    failureThreshold: 6
    successThreshold: 1

  readinessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 1
    failureThreshold: 6
    successThreshold: 1

  startupProbe:
    enabled: false
    initialDelaySeconds: 10
    periodSeconds: 5
    timeoutSeconds: 1
    failureThreshold: 30
    successThreshold: 1

  additionalLabels: { }
  podAnnotations: { }
  podLabels: { }

  resources: { }
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
  #   cpu: 100m
  #   memory: 128Mi

  containerSecurityContext:
    runAsNonRoot: true
    runAsUser: 1000
    runAsGroup: 2000
    allowPrivilegeEscalation: false
    privileged: false
    readOnlyRootFilesystem: true

  podSecurityContext:
    fsGroup: 3000
    fsGroupChangePolicy: Always

  # If true ensures that the pre-existing files on the storage and snapshot volume are owned by the container's
  # user and fsGroup
  updateVolumeFsOwnership: true

  nodeSelector: { }

  tolerations: [ ]

  affinity: { }

  topologySpreadConstraints: [ ]

  persistence:
    accessModes: [ "ReadWriteOnce" ]
    size: 10Gi
    annotations: { }
    # storageClassName: local-path

  # only supported for single node qdrant clusters.
  snapshotRestoration:
    enabled: false
    pvcName: snapshots-pvc
    snapshots:
    #  - /qdrant/snapshots/test_collection/test_collection-2022-10-24-13-56-50.snapshot:test_collection

  # modification example for configuration to overwrite defaults
  config:
    cluster:
      enabled: true
      p2p:
        port: 6335
      consensus:
        tick_period_ms: 100

  sidecarContainers: [ ]
  # sidecarContainers:
  #   - name: my-sidecar
  #     image: qdrant/my-sidecar-image
  #     imagePullPolicy: Always
  #     ports:
  #     - name: my-port
  #       containerPort: 5000
  #       protocol: TCP
  #     resources:
  #       requests:
  #         memory: 10Mi
  #         cpu: 10m
  #       limits:
  #         memory: 100Mi
  #         cpu: 100m

  metrics:
    serviceMonitor:
      enabled: false
      additionalLabels: { }
      scrapeInterval: 30s
      scrapeTimeout: 10s
      targetPort: http
      targetPath: "/metrics"
      ## MetricRelabelConfigs to apply to samples after scraping, but before ingestion.
      ## ref: https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/api.md#relabelconfig
      ##
      metricRelabelings: [ ]
      ## RelabelConfigs to apply to samples before scraping
      ## ref: https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/api.md#relabelconfig
      ##
      relabelings: [ ]

  serviceAccount:
    annotations: { }

  priorityClassName: ""

  podDisruptionBudget:
    enabled: false
    maxUnavailable: 1
    # do not enable if you are using not in 1.27
    unhealthyPodEvictionPolicy: ""
    # minAvailable: 1

  # api key for authentication at qdrant
  # false: no api key will be configured
  # true: an api key will be auto-generated
  # string: the given string will be set as an apikey
  apiKey: false
  # read-only api key for authentication at qdrant
  # false: no read-only api key will be configured
  # true: an read-only api key will be auto-generated
  # string: the given string will be set as a read-only apikey
  readOnlyApiKey: false

  additionalVolumes: [ ]
  # - name: volumeName
  #   emptyDir: {}

  additionalVolumeMounts: [ ]
